// Code generated by go-bindata.
// sources:
// templ/config.templ
// testdata/pligos.yaml
// testdata/result.yaml
// testdata/schema.yaml
// DO NOT EDIT!

package pligos

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templConfigTempl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4f\x8f\xd3\x30\x10\xc5\xcf\xf6\xa7\x18\x72\x40\x89\x94\x4d\xef\x95\x7a\x2a\x62\x81\x43\x55\xb1\x70\x40\x88\x83\x49\x26\xa9\x21\x75\x82\xe3\xec\xaa\xb2\xfc\xdd\x91\xff\xa4\x9b\xb4\x29\x65\x11\x42\x1c\xf6\x16\x79\x9c\x9f\xdf\xb3\x9f\xc7\x5a\xdf\x40\x81\x25\x17\x08\x51\x2f\xf6\x4c\x76\x3b\x56\xbf\xeb\x1a\x11\xc1\x8d\x31\x94\xa0\x94\xb0\x82\x38\x6f\x44\xc9\xab\x5e\x32\xc5\x1b\x91\xd9\xba\x36\x49\xf6\x71\xf8\x21\xa6\x84\xbc\xd4\x1a\xb2\x0d\xdb\x23\x18\x93\x52\x42\x5a\xd9\xdc\xf3\x02\x65\x1c\xd9\xc2\xba\x11\x8a\x71\x81\x72\xcb\xd4\x0e\x8c\x89\x52\x70\xe3\xaf\x79\x8d\xe1\xa7\x61\x68\xbd\x63\x52\x0d\xd3\x20\x85\xe9\xda\x01\x56\xf2\xea\xc3\xa1\xb5\xbf\x25\x59\x96\xa5\x94\x24\xd4\x5a\x41\x51\x38\xdd\x74\xd6\xd7\x27\xb6\xaf\x7f\xe5\xcb\xd6\xff\x91\xaf\xbf\x60\x4b\x22\x2b\x82\x9b\xb1\x44\xf0\xd6\xa6\xf8\x5b\x54\xaf\x98\x62\xf1\xff\xa4\x1f\xa5\xdc\x31\x51\xd4\x5c\x54\xde\x06\x2f\x9d\xf6\x17\x2b\x10\xbc\x06\x4d\x01\x24\xaa\x5e\x0a\xf0\x60\x6d\x52\xb8\xc3\x5c\xa2\xd2\xde\x25\x35\x53\x78\xcb\xf2\xef\xac\x42\xb0\x5a\xb6\xe1\xdb\x8e\xf3\x7d\xdb\x48\xe5\x36\xac\xce\xeb\xa6\x2f\x32\x85\xf9\x6e\x31\x31\x10\x39\x14\x2f\x21\x7b\xc3\xba\x3b\x25\xfb\x5c\xf5\x12\x0b\xbf\xb2\xa5\x0c\x90\x11\xfc\x7d\xd3\x28\x30\x66\x31\x5d\x6f\x91\x97\x55\x74\x14\x66\xcc\x3c\xd8\x1b\x79\x1a\xb8\x73\xff\x4c\xd8\x54\xd9\xdd\x0e\x2a\x3b\x47\x07\xed\x26\x48\x26\x2a\x1c\xce\xe4\xad\xe8\x14\x13\x39\x76\x70\x92\x16\xb7\x57\xe1\xc4\xc6\xdc\x81\x1c\x64\xce\x91\x7d\xe9\x4f\xc8\x65\x2f\x72\x38\xc6\x30\x1f\x27\x30\x85\x32\x04\x2f\x85\x7c\xc8\xdb\x90\x35\x47\xeb\x94\xe4\xa2\x4a\xe0\xf3\x97\x69\x00\xbd\xd1\x6d\xa0\x82\xa6\xc7\xa0\xc3\x72\x75\x65\xb6\x9e\x16\x37\xf8\x60\xe3\xbf\x9d\x55\x98\x18\x4a\x49\x5b\xf3\xaa\xe9\xfc\x55\x5b\x9e\xde\xb5\x0d\x3e\x6c\x5d\x7d\x0c\x08\xf2\x67\xfd\x25\x94\x9c\x46\x9f\x90\x10\xfd\xc1\x04\x25\x76\xdd\x30\xc8\xda\x16\x45\x11\x0f\xb5\x14\xbc\x9e\xe4\xb8\xb9\xb7\xa8\xd6\x63\x4d\x71\x02\xb1\x1f\x18\xae\x90\xd3\xde\xc8\xc4\xae\x75\xcf\xa4\x5b\xdd\x8d\xd0\x6b\xe9\xb1\xb3\x2f\x9f\xb3\x4d\x3a\xfe\xf0\x7d\x05\x85\x72\x85\xe8\xe0\xfa\xae\x31\x5a\x83\xc2\x7d\x5b\x33\x75\xde\x95\x33\x5f\x3f\xde\x99\x59\xd0\x37\xf7\x30\x5d\x02\xf9\x67\xeb\xb7\x40\x5f\xb9\x60\xf2\x70\x86\xf2\x2d\xf5\x8c\xf0\x38\x61\xd2\xb3\xb2\x93\x68\x5f\xbb\x1d\xcf\x3b\x77\x71\xe7\xc8\xb4\xd3\x5f\xcb\x20\x19\x77\x9a\x25\x4c\x5e\xe8\x11\x96\x90\xc7\x27\xe3\xda\xe1\x3c\x05\x29\x78\x4d\x0d\xfd\x19\x00\x00\xff\xff\x20\xce\x72\xe5\x3b\x09\x00\x00")

func templConfigTemplBytes() ([]byte, error) {
	return bindataRead(
		_templConfigTempl,
		"templ/config.templ",
	)
}

func templConfigTempl() (*asset, error) {
	bytes, err := templConfigTemplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templ/config.templ", size: 2363, mode: os.FileMode(420), modTime: time.Unix(1545057306, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataPligosYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x3d\x6e\xc3\x30\x0c\x85\x77\x9f\x82\xc8\x9e\xc0\xcd\xd4\x7a\xed\x05\x3a\x75\x29\x3a\xd0\x16\xed\x18\x70\x28\x81\xa2\xd2\x9f\xd3\x17\xa1\x1a\x45\x06\x1a\x14\xf1\xf6\xc8\xc7\xf7\xd1\x36\xc5\x27\xa5\xae\x01\xd8\x02\xe3\x91\x3a\x38\xa8\x86\x06\x00\x40\xbf\x42\x2d\x83\x17\xed\xe0\xb1\x35\x31\x78\x56\x9c\x99\xe4\xc5\xaa\xfb\x7d\xdb\xe6\x86\x2e\xb1\x03\x95\x44\xa6\x0e\x3e\x6a\x4e\x9d\x1d\xb1\xba\x9d\x10\x2e\x5b\x47\xa7\x9d\xa3\x0a\x39\x49\x18\x2a\x64\x91\x19\xf9\x74\x13\xf9\x70\x2f\xb2\x99\x79\x12\x8a\xb1\x7e\x5f\x47\x23\xa6\x45\x6d\x98\x18\xfb\x85\x5c\x15\x87\xcc\x5e\x51\x67\xcf\x36\x74\x7e\x46\xef\x3b\xe8\x51\x9a\x46\xf0\xe3\x15\x97\x44\x37\xf3\x4e\xa5\xbb\x1e\x1c\x3c\x8f\xf3\x94\xc4\x82\xef\x1c\xbe\x9a\x13\xa7\x48\xee\x0f\x6f\x8f\x72\xf6\x7e\x1b\x48\xe9\x53\xad\xd3\x63\xa4\xec\xb8\xee\xbd\x02\x0a\x05\x42\x25\xf7\xbc\xda\x0e\xde\x36\xbf\xa6\xcd\xbb\xd9\x8e\x18\xc2\xbf\xa6\xcb\x87\x5e\x01\xca\x2f\x2c\x9b\x6e\xc1\xee\xaf\xe8\x5c\x2b\x37\x77\x29\xd8\x45\xfc\x04\x00\x00\xff\xff\x53\xfc\xe4\x60\xaa\x02\x00\x00")

func testdataPligosYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataPligosYaml,
		"testdata/pligos.yaml",
	)
}

func testdataPligosYaml() (*asset, error) {
	bytes, err := testdataPligosYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/pligos.yaml", size: 682, mode: os.FileMode(420), modTime: time.Unix(1545910486, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataResultYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x41\x6a\xc4\x30\x0c\x45\xf7\x3e\x85\x2e\x90\x21\x9d\x55\xeb\x6d\x2f\xd0\x2b\x68\xc6\x4a\xc6\xe0\x91\x8c\x2c\x17\x7a\xfb\x12\xc7\x71\xa1\x94\x40\x77\xc2\xfa\xff\x3d\xac\xbb\xb0\x61\x64\xd2\xe2\xdd\x04\x2a\xd5\xa8\x78\x07\x00\xf0\x30\xcb\xfb\x04\x30\x52\x1f\xa2\xe6\xe1\x7a\x9d\xe7\xb9\xaf\x1e\x52\x8c\xf1\x49\x1e\x62\x20\xb6\x70\x51\xc2\x34\x05\xfa\xbc\x04\xea\x91\xdc\x4a\xaf\x47\xc3\x52\xf1\x60\x5a\x8f\xb5\x7d\x65\xf2\x4d\xd7\x1e\x56\xcd\xf7\x13\xef\xcb\x7f\xbd\x6f\xe7\xde\x4d\xe7\x22\xaf\x4a\xa5\x7d\x1c\x99\xc5\xd0\xa2\x70\xbf\xc3\x22\xe2\xe1\x86\xea\x00\x88\xf1\x96\x28\x0c\xca\xee\x0f\xb4\x60\x4d\xe6\x46\x50\x29\x13\x1a\x85\x77\xe1\x25\xae\x55\x1b\x6d\x83\x4d\x3f\xb0\x27\xe6\xfc\x47\xa2\xb3\x7e\x99\xc7\xf0\x1d\x00\x00\xff\xff\xce\xe8\xa3\x26\xae\x01\x00\x00")

func testdataResultYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataResultYaml,
		"testdata/result.yaml",
	)
}

func testdataResultYaml() (*asset, error) {
	bytes, err := testdataResultYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/result.yaml", size: 430, mode: os.FileMode(420), modTime: time.Unix(1545911587, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataSchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x3d\x76\xc4\x30\x08\x84\x7b\x4e\x31\xe7\x50\x9b\x0b\xa4\x4a\x8f\x2d\xe2\x28\xcf\x06\x3f\x84\xf3\x73\xfb\x3c\x79\xbd\x72\xbc\xcd\x76\x08\xbe\x19\xd0\xb8\x6d\x21\x89\x80\xf8\x5d\x25\xa1\x86\x17\x9d\x08\x58\xcd\x23\x41\xb7\x45\xbc\x8c\x04\x8c\xa6\xc1\x45\xc5\x5f\x1f\x06\x31\xd7\x84\xc1\x6c\x26\xe0\xc3\x6a\x28\x2f\xa7\x0f\x75\x59\x5b\xb1\xef\xaa\x09\x0b\xaf\xab\xe4\xdb\x93\xa8\xe8\xe4\x52\x6b\x03\x2e\x5a\x40\x94\x87\x59\x72\xb7\x67\x55\x0b\x8e\x62\x5a\x13\x6c\xf8\x94\x31\x88\x9c\xbf\xdf\x78\xde\x64\x37\xf8\xba\x55\x90\x65\x90\x9c\x25\x77\x6a\x34\x7d\x2f\xd3\xe6\xbb\xfa\x19\x19\xf2\x13\x8d\xb9\x5f\x76\x2f\xfe\xc7\x50\x13\x5c\x56\xe1\x90\x7c\x36\xdb\x1f\xfb\x39\xa7\x75\xef\xb5\xf9\x21\x7a\xb9\x1c\x74\xf1\x3a\xfb\x84\x23\xab\x07\xfa\x08\xf0\xca\xfe\x05\x00\x00\xff\xff\xd9\x4e\x20\xd2\xca\x01\x00\x00")

func testdataSchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataSchemaYaml,
		"testdata/schema.yaml",
	)
}

func testdataSchemaYaml() (*asset, error) {
	bytes, err := testdataSchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/schema.yaml", size: 458, mode: os.FileMode(420), modTime: time.Unix(1545911572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templ/config.templ": templConfigTempl,
	"testdata/pligos.yaml": testdataPligosYaml,
	"testdata/result.yaml": testdataResultYaml,
	"testdata/schema.yaml": testdataSchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templ": &bintree{nil, map[string]*bintree{
		"config.templ": &bintree{templConfigTempl, map[string]*bintree{}},
	}},
	"testdata": &bintree{nil, map[string]*bintree{
		"pligos.yaml": &bintree{testdataPligosYaml, map[string]*bintree{}},
		"result.yaml": &bintree{testdataResultYaml, map[string]*bintree{}},
		"schema.yaml": &bintree{testdataSchemaYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

