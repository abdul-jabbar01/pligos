// Code generated by go-bindata.
// sources:
// testdata/a/pligos.yaml
// testdata/a/result.yaml
// testdata/a/schema.yaml
// testdata/b/pligos.yaml
// testdata/b/result.yaml
// testdata/b/schema.yaml
// DO NOT EDIT!

package compiler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testdataAPligosYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x3d\x6e\xc3\x30\x0c\x85\x77\x9f\x82\xc8\x9e\xc0\xcd\xd4\x7a\xed\x05\x3a\x75\x29\x3a\xd0\x16\xed\x18\x70\x28\x81\xa2\xd2\x9f\xd3\x17\xa1\x1a\x45\x06\x1a\x14\xf1\xf6\xc8\xc7\xf7\xd1\x36\xc5\x27\xa5\xae\x01\xd8\x02\xe3\x91\x3a\x38\xa8\x86\x06\x00\x40\xbf\x42\x2d\x83\x17\xed\xe0\xb1\x35\x31\x78\x56\x9c\x99\xe4\xc5\xaa\xfb\x7d\xdb\xe6\x86\x2e\xb1\x03\x95\x44\xa6\x0e\x3e\x6a\x4e\x9d\x1d\xb1\xba\x9d\x10\x2e\x5b\x47\xa7\x9d\xa3\x0a\x39\x49\x18\x2a\x64\x91\x19\xf9\x74\x13\xf9\x70\x2f\xb2\x99\x79\x12\x8a\xb1\x7e\x5f\x47\x23\xa6\x45\x6d\x98\x18\xfb\x85\x5c\x15\x87\xcc\x5e\x51\x67\xcf\x36\x74\x7e\x46\xef\x3b\xe8\x51\x9a\x46\xf0\xe3\x15\x97\x44\x37\xf3\x4e\xa5\xbb\x1e\x1c\x3c\x8f\xf3\x94\xc4\x82\xef\x1c\xbe\x9a\x13\xa7\x48\xee\x0f\x6f\x8f\x72\xf6\x7e\x1b\x48\xe9\x53\xad\xd3\x63\xa4\xec\xb8\xee\xbd\x02\x0a\x05\x42\x25\xf7\xbc\xda\x0e\xde\x36\xbf\xa6\xcd\xbb\xd9\x8e\x18\xc2\xbf\xa6\xcb\x87\x5e\x01\xca\x2f\x2c\x9b\x6e\xc1\xee\xaf\xe8\x5c\x2b\x37\x77\x29\xd8\x45\xfc\x04\x00\x00\xff\xff\x53\xfc\xe4\x60\xaa\x02\x00\x00")

func testdataAPligosYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataAPligosYaml,
		"testdata/a/pligos.yaml",
	)
}

func testdataAPligosYaml() (*asset, error) {
	bytes, err := testdataAPligosYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/a/pligos.yaml", size: 682, mode: os.FileMode(420), modTime: time.Unix(1545999698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataAResultYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x41\x6a\xc4\x30\x0c\x45\xf7\x3e\x85\x2e\x90\x21\x9d\x55\xeb\x6d\x2f\xd0\x2b\x68\xc6\x4a\xc6\xe0\x91\x8c\x2c\x17\x7a\xfb\x12\xc7\x71\xa1\x94\x40\x77\xc2\xfa\xff\x3d\xac\xbb\xb0\x61\x64\xd2\xe2\xdd\x04\x2a\xd5\xa8\x78\x07\x00\xf0\x30\xcb\xfb\x04\x30\x52\x1f\xa2\xe6\xe1\x7a\x9d\xe7\xb9\xaf\x1e\x52\x8c\xf1\x49\x1e\x62\x20\xb6\x70\x51\xc2\x34\x05\xfa\xbc\x04\xea\x91\xdc\x4a\xaf\x47\xc3\x52\xf1\x60\x5a\x8f\xb5\x7d\x65\xf2\x4d\xd7\x1e\x56\xcd\xf7\x13\xef\xcb\x7f\xbd\x6f\xe7\xde\x4d\xe7\x22\xaf\x4a\xa5\x7d\x1c\x99\xc5\xd0\xa2\x70\xbf\xc3\x22\xe2\xe1\x86\xea\x00\x88\xf1\x96\x28\x0c\xca\xee\x0f\xb4\x60\x4d\xe6\x46\x50\x29\x13\x1a\x85\x77\xe1\x25\xae\x55\x1b\x6d\x83\x4d\x3f\xb0\x27\xe6\xfc\x47\xa2\xb3\x7e\x99\xc7\xf0\x1d\x00\x00\xff\xff\xce\xe8\xa3\x26\xae\x01\x00\x00")

func testdataAResultYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataAResultYaml,
		"testdata/a/result.yaml",
	)
}

func testdataAResultYaml() (*asset, error) {
	bytes, err := testdataAResultYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/a/result.yaml", size: 430, mode: os.FileMode(420), modTime: time.Unix(1545999698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataASchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x3d\x76\xc4\x30\x08\x84\x7b\x4e\x31\xe7\x50\x9b\x0b\xa4\x4a\x8f\x2d\xe2\x28\xcf\x06\x3f\x84\xf3\x73\xfb\x3c\x79\xbd\x72\xbc\xcd\x76\x08\xbe\x19\xd0\xb8\x6d\x21\x89\x80\xf8\x5d\x25\xa1\x86\x17\x9d\x08\x58\xcd\x23\x41\xb7\x45\xbc\x8c\x04\x8c\xa6\xc1\x45\xc5\x5f\x1f\x06\x31\xd7\x84\xc1\x6c\x26\xe0\xc3\x6a\x28\x2f\xa7\x0f\x75\x59\x5b\xb1\xef\xaa\x09\x0b\xaf\xab\xe4\xdb\x93\xa8\xe8\xe4\x52\x6b\x03\x2e\x5a\x40\x94\x87\x59\x72\xb7\x67\x55\x0b\x8e\x62\x5a\x13\x6c\xf8\x94\x31\x88\x9c\xbf\xdf\x78\xde\x64\x37\xf8\xba\x55\x90\x65\x90\x9c\x25\x77\x6a\x34\x7d\x2f\xd3\xe6\xbb\xfa\x19\x19\xf2\x13\x8d\xb9\x5f\x76\x2f\xfe\xc7\x50\x13\x5c\x56\xe1\x90\x7c\x36\xdb\x1f\xfb\x39\xa7\x75\xef\xb5\xf9\x21\x7a\xb9\x1c\x74\xf1\x3a\xfb\x84\x23\xab\x07\xfa\x08\xf0\xca\xfe\x05\x00\x00\xff\xff\xd9\x4e\x20\xd2\xca\x01\x00\x00")

func testdataASchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataASchemaYaml,
		"testdata/a/schema.yaml",
	)
}

func testdataASchemaYaml() (*asset, error) {
	bytes, err := testdataASchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/a/schema.yaml", size: 458, mode: os.FileMode(420), modTime: time.Unix(1545999698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataBPligosYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xbb\x6e\xc3\x30\x0c\xdc\xf5\x15\x84\x77\x07\x6e\xa6\xd6\x6b\x7f\xa0\x53\x97\x20\x03\x6d\xd1\x8e\x00\x47\x12\x28\xca\x7d\x7c\x7d\x61\xa9\x56\x6c\xa0\x41\x11\x6d\x47\xdd\xf1\xf8\x62\x17\x85\x5a\x05\x50\x83\xc5\x2b\xb5\x70\x11\xf1\x0a\x00\x40\xbe\xfc\x16\x7a\xc7\xd2\xc2\x73\x93\x40\xef\xac\xa0\xb1\xc4\x6f\x29\x7a\x3c\x36\x4d\xfe\x90\x29\xb4\x20\x1c\x29\xa1\x8b\x0b\x92\xb3\x1a\x4d\x56\xf4\x81\x09\xa7\x5a\xd3\x7c\xd0\xb4\xb1\x1c\xd9\xf7\x1b\xcb\x02\xb3\xe5\xcb\x5d\xcb\xa7\x47\x2d\x95\xb1\x23\x53\x08\xdb\x7e\x35\x0d\x18\x27\x49\x62\xb2\xd8\x4d\xa4\x37\xe9\xd0\x5a\x27\x28\xc6\xd9\x24\x5a\xde\xe0\x5c\x0b\x1d\xb2\x52\x8c\x1f\xef\x38\x45\xba\x9b\x6f\x2e\xbf\x7b\x61\xef\xec\x60\xc6\xc8\x29\xf1\x83\xe2\x1b\x39\xda\x18\x48\xff\xc1\xed\x90\x17\xee\xb7\x52\x81\x78\x36\xfd\x6e\xbf\x79\x2c\x89\x79\xab\x7f\x67\xcc\xe4\x09\x85\xf4\xeb\xae\x4a\x38\x55\xbf\xa4\xea\x9c\x68\x57\xf4\xfe\x5f\xd2\x3a\xf0\x9d\x41\x59\x65\xa9\xb8\x86\x74\x87\x05\xe7\x58\xb9\xbd\x35\x90\x2e\x63\x99\x9e\xd0\xa7\x24\x72\x87\x81\xb2\x68\x6d\x15\x4e\x55\x6e\xb1\x3a\xab\x9f\x00\x00\x00\xff\xff\x70\x0b\x5b\x77\xdd\x02\x00\x00")

func testdataBPligosYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataBPligosYaml,
		"testdata/b/pligos.yaml",
	)
}

func testdataBPligosYaml() (*asset, error) {
	bytes, err := testdataBPligosYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/b/pligos.yaml", size: 733, mode: os.FileMode(420), modTime: time.Unix(1546258617, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataBResultYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6a\xc4\x30\x0c\x45\xf7\x39\x85\x2e\x90\x21\x9d\x55\xeb\x6d\x2f\xd0\x2b\x68\xc6\x4a\xc6\xe0\x48\x46\x96\x0b\xbd\x7d\x89\x93\x3a\x29\x84\x16\xc6\xab\x2f\xeb\xe9\xeb\xa3\xe0\x89\xcd\xbb\x0e\xe0\x2e\x6c\x18\x98\x34\x2f\x55\x0f\x2a\xc5\xa8\xea\xe5\x3d\xcc\xd2\x8f\x3e\xb0\x1f\xa2\xe6\xe0\x7a\x1d\x86\xa1\x35\x1f\x92\x8d\x71\x26\x07\xab\xf9\x45\x09\x63\xef\xe9\xf3\xe2\xa9\x41\xa9\x0e\xbe\xee\x53\x16\xb3\x03\xd3\xb2\x23\xf6\x95\xc8\xd5\xc5\xdb\xd7\xa4\xe9\xfe\x67\x86\x97\x67\x32\xbc\xfd\x9f\x61\x59\xdc\x01\x04\x9e\x94\xf2\x76\x12\x64\x16\x43\x0b\xc2\xed\x46\xa3\x88\x83\x1b\x6a\x2d\x89\xf1\x16\xc9\x1f\xfc\xd6\x3c\x9e\x46\x2c\xd1\xba\x5f\xb8\x52\x22\x34\xf2\xef\xc2\x63\x98\x8a\x56\xdf\xd5\xb6\x3f\x72\x33\xa6\x74\x4a\x6d\xae\x27\x49\x9a\xfc\x0e\x00\x00\xff\xff\xf0\x9d\xe0\x38\xea\x01\x00\x00")

func testdataBResultYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataBResultYaml,
		"testdata/b/result.yaml",
	)
}

func testdataBResultYaml() (*asset, error) {
	bytes, err := testdataBResultYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/b/result.yaml", size: 490, mode: os.FileMode(420), modTime: time.Unix(1546257431, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataBSchemaYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x50\x4d\x56\xc6\x20\x0c\xdc\xe7\x14\x39\x07\x5b\x2f\xe0\xca\x3d\x85\x58\xf1\xb5\x09\x2f\xa4\x9f\x7a\x7b\x1f\x7c\x14\x6c\x17\xee\x20\xf3\x93\xc9\xa8\x1c\x46\x0e\x10\xed\x27\x93\xc3\x62\x9a\x78\x05\xc4\x2c\x6a\x0e\xf9\xd8\x49\x53\x00\xc4\x20\x6c\x3e\x31\xe9\xeb\x0d\xb0\xad\x38\x5c\x44\x36\x40\xfc\x90\x62\xec\xf7\xe9\x03\x43\x56\x57\xb4\x5d\xc5\xe1\xee\x73\xa6\xf8\xfc\x02\x24\x5e\x95\x4a\xa9\x84\x8b\x16\x91\xd8\x2f\x1b\xc5\x61\xef\x99\xc5\xbc\x25\xe1\xe2\x50\x96\x4f\x0a\x06\xa0\xfe\xeb\xcd\x6f\x07\x35\x83\xc7\xf3\x85\xb4\x2f\x14\x23\xc5\xc1\x0a\xc2\xef\x69\x3d\xb4\xa9\xff\x65\x16\xd2\x47\x0a\xad\x92\x33\xd9\xf9\xf8\x5b\x43\x71\xa8\x94\xc9\x1b\xc5\x39\xac\x37\x8e\x38\xd3\x7a\xcc\x2a\xde\x45\x2f\x97\x40\x17\xaf\x39\x07\xec\x5d\xdd\xd8\xbd\xc0\x2b\xb7\x75\x4d\xdf\x56\x93\x9f\x47\xcc\x0c\x5d\xd2\x01\xf8\x0d\x00\x00\xff\xff\x8c\x0b\x84\x6e\xf7\x01\x00\x00")

func testdataBSchemaYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataBSchemaYaml,
		"testdata/b/schema.yaml",
	)
}

func testdataBSchemaYaml() (*asset, error) {
	bytes, err := testdataBSchemaYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/b/schema.yaml", size: 503, mode: os.FileMode(420), modTime: time.Unix(1546257401, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testdata/a/pligos.yaml": testdataAPligosYaml,
	"testdata/a/result.yaml": testdataAResultYaml,
	"testdata/a/schema.yaml": testdataASchemaYaml,
	"testdata/b/pligos.yaml": testdataBPligosYaml,
	"testdata/b/result.yaml": testdataBResultYaml,
	"testdata/b/schema.yaml": testdataBSchemaYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"testdata": &bintree{nil, map[string]*bintree{
		"a": &bintree{nil, map[string]*bintree{
			"pligos.yaml": &bintree{testdataAPligosYaml, map[string]*bintree{}},
			"result.yaml": &bintree{testdataAResultYaml, map[string]*bintree{}},
			"schema.yaml": &bintree{testdataASchemaYaml, map[string]*bintree{}},
		}},
		"b": &bintree{nil, map[string]*bintree{
			"pligos.yaml": &bintree{testdataBPligosYaml, map[string]*bintree{}},
			"result.yaml": &bintree{testdataBResultYaml, map[string]*bintree{}},
			"schema.yaml": &bintree{testdataBSchemaYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
